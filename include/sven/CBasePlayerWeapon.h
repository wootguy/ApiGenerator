// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: weapon_crowbar
class CBasePlayerWeapon {
public:
    byte u0[4];
    entvars_t* pev; // Entity variables
    byte u1[48];
    bool m_fOverrideClass; // Whether this entity overrides the classification.
    byte u2[3];
    int m_iClassSelection; // The overridden classification.
    byte u3[20];
    float m_flMaximumFadeWait; // Maximum fade wait time.
    float m_flMaximumFadeWaitB; // Maximum fade wait time B.
    bool m_fCanFadeStart; // Whether fading can start.
    byte u4[11];
    bool m_fCustomModel; // Whether a custom model is used.
    byte u5[3];
    vec3_t m_vecLastOrigin; // Last origin vector
    string_t targetnameOutFilterType; // Target name out filter type.
    string_t classnameOutFilterType; // Class name out filter type.
    string_t targetnameInFilterType; // Target name in filter type.
    string_t classnameInFilterType; // Class name in filter type.
    byte u6[16];
    int m_iOriginalRenderMode; // Original render model.
    int m_iOriginalRenderFX; // Original render FX.
    float m_flOriginalRenderAmount; // Original render amount.
    vec3_t m_vecOriginalRenderColor; // Original render color.
    byte u7[144];
    float m_flDelay; // Delay before fire.
    string_t m_iszKillTarget; // The name of the kill target, if any.
    float m_flFrameRate; // Computed FPS for current sequence.
    float m_flGroundSpeed; // Computed linear movement rate for current sequence.
    float m_flLastEventCheck; // Last time the event list was checked.
    float m_flLastGaitEventCheck; // Last time the event list was checked.
    bool m_fSequenceFinished; // Flag set when StudioAdvanceFrame moves across a frame boundry.
    bool m_fSequenceLoops; // True if the sequence loops.
    byte u8[62];
    EHandle m_hPlayer; // The owning player. null if no owner.
    EHandle m_hNextItem; // Gets the next item. null if no next item.
    byte u9[8];
    float m_flLastBounce; // The last bounce time.
    byte u10[20];
    bool m_bExclusiveHold; // If set, as long as a player has this item, the player must keep this weapon selected.No more than one item with this set can be carried at one time.
    byte u11[3];
    bool m_bPlayEmptySound; // Whether to play the empty sound when the player attempts to fire
    bool m_bFireOnEmpty; // True when the gun is empty and the player is still holding down the attack key(s)
    byte u12[2];
    float m_flNextPrimaryAttack; // soonest time ItemPostFrame will call PrimaryAttack
    float m_flNextSecondaryAttack; // soonest time ItemPostFrame will call SecondaryAttack
    float m_flNextTertiaryAttack; // soonest time ItemPostFrame will call TertiaryAttack
    float m_flTimeWeaponIdle; // soonest time ItemPostFrame will call WeaponIdle
    int m_iPrimaryAmmoType; // "primary" ammo index into players m_rgAmmo[]
    int m_iSecondaryAmmoType; // "secondary" ammo index into players m_rgAmmo[]
    int m_iClip; // number of shots left in the primary weapon clip, -1 it not used
    int m_iClip2; // number of shots left in the secondary weapon clip, -1 it not used
    byte u13[12];
    bool m_fInReload; // Are we in the middle of a reload
    byte u14[3];
    float m_flCustomDmg; // Per-entity weapon damage
    bool m_fIsAkimbo; // Weapon is in 'akimbo' mode
    bool m_fInZoom; // Weapon is zoomed in
    byte u15[6];
    float m_flNextBurstRound; // When the next burst round is to be fired
    byte u16[4];
    int m_iDefaultAmmo; // The amount of primary ammo you receive when you pick up this weapon as placed by a level designer.
    int m_iDefaultSecAmmo; // The amount of secondary ammo you receive when you pick up this weapon as placed by a level designer.
};
