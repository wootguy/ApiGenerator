// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: scripted_sequence
class CCineMonster {
public:
    byte u0[4];
    entvars_t* pev; // Entity variables
    byte u1[48];
    bool m_fOverrideClass; // Whether this entity overrides the classification.
    byte u2[3];
    int m_iClassSelection; // The overridden classification.
    byte u3[20];
    float m_flMaximumFadeWait; // Maximum fade wait time.
    float m_flMaximumFadeWaitB; // Maximum fade wait time B.
    bool m_fCanFadeStart; // Whether fading can start.
    byte u4[11];
    bool m_fCustomModel; // Whether a custom model is used.
    byte u5[3];
    vec3_t m_vecLastOrigin; // Last origin vector
    string_t targetnameOutFilterType; // Target name out filter type.
    string_t classnameOutFilterType; // Class name out filter type.
    string_t targetnameInFilterType; // Target name in filter type.
    string_t classnameInFilterType; // Class name in filter type.
    byte u6[16];
    int m_iOriginalRenderMode; // Original render model.
    int m_iOriginalRenderFX; // Original render FX.
    float m_flOriginalRenderAmount; // Original render amount.
    vec3_t m_vecOriginalRenderColor; // Original render color.
    byte u7[144];
    float m_flDelay; // Delay before fire.
    string_t m_iszKillTarget; // The name of the kill target, if any.
    float m_flFrameRate; // Computed FPS for current sequence.
    float m_flGroundSpeed; // Computed linear movement rate for current sequence.
    float m_flLastEventCheck; // Last time the event list was checked.
    float m_flLastGaitEventCheck; // Last time the event list was checked.
    bool m_fSequenceFinished; // Flag set when StudioAdvanceFrame moves across a frame boundry.
    bool m_fSequenceLoops; // True if the sequence loops.
    byte u8[2];
    int m_toggle_state; // Current toggle state.
    float m_flMoveDistance; // How far a door should slide or rotate.
    float m_flWait; // How long to wait before resetting.
    float m_flLip; // How much to stick out of a wall. Will recede further into walls if negative.
    float m_flTWidth; // For plats.
    float m_flTLength; // For plats.
    byte u9[4];
    vec3_t m_vecPosition1; // Closed position.
    vec3_t m_vecPosition2; // Open position.
    vec3_t m_vecAngle1; // Closed angle.
    vec3_t m_vecAngle2; // Open angle.
    int m_cTriggersLeft; // Trigger_counter only: # of activations remaining.
    float m_flHeight; // Height.
    EHandle m_hActivator; // Handle to the activator.
    byte u10[4];
    vec3_t m_vecFinalDest; // Final destination.
    vec3_t m_vecFinalAngle; // Final angle.
    int m_bitsDamageInflict; // DMG_ damage type that the door or trigger does.
    string_t m_sMaster; // This entity's master, if any.
    byte u11[8];
    EHandle m_hEnemy; // the entity that the monster is fighting.
    EHandle m_hTargetEnt; // the entity that the monster is trying to reach.
    byte u12[8];
    EHandle m_hTargetTank; // Target tank to control.
    byte u13[80];
    float m_flFieldOfView; // width of monster's field of view ( dot product ).
    float m_flWaitFinished; // if we're told to wait, this is the time that the wait will be over.
    float m_flMoveWaitFinished; // if we're told to wait before moving, this is the time that the wait will be over.
    int m_Activity; // what the monster is doing (animation).
    int m_IdealActivity; // monster should switch to this activity.
    int m_GaitActivity; // gaitsequence.
    int m_LastHitGroup; // the last body region that took damage.
    int m_MonsterState; // monster's current state.
    int m_IdealMonsterState; // monster should change to this state.
    int m_iTaskStatus; // Task status.
    void* m_pSchedule; // Current schedule.
    void* m_pScheduleSaved; // For land_on_ground schedules (remember last schedule and continue).
    int m_iScheduleIndex; // Schedule index.
    byte u14[416];
    int m_movementGoal; // Goal that defines route.
    int m_iRouteIndex; // Index into m_Route[].
    float m_moveWaitTime; // How long I should wait for something to move.
    float m_moveradius; // Minimum radius.
    vec3_t m_vecMoveGoal; // Kept around for node graph moves, so we know our ultimate goal.
    int m_movementActivity; // When moving, set this activity.
    int m_iAudibleList; // first index of a linked list of sounds that the monster can hear.
    int m_afSoundTypes; // Sound types that can be heard.
    vec3_t m_vecLastPosition; // monster sometimes wants to return to where it started after an operation..
    int m_iHintNode; // this is the hint node that the monster is moving towards or performing active idle on..
    int m_afMemory; // Monster memory.
    int m_bloodColor; // color of blood particles.
    int m_iMaxHealth; // keeps track of monster's maximum health value (for re-healing, etc).
    vec3_t m_vecEnemyLKP; // last known position of enemy. (enemy's origin).
    int m_cAmmoLoaded; // how much ammo is in the weapon (used to trigger reload anim sequences).
    int m_afCapability; // tells us what a monster can/can't do.
    int m_afMoveShootCap; // tells us what a monster can/can't do, while moving.
    float m_flNextAttack; // cannot attack again until this time.
    int m_bitsDamageType; // what types of damage has monster (player) taken.
    byte u15[8];
    float m_lastDamageAmount; // how much damage did monster (player) last take.
    float m_tbdPrev; // Time-based damage timer.
    entvars_t* pevTimeBasedInflictor; // Time based damage inflictor.
    int m_failSchedule; // Schedule type to choose if current schedule fails.
    float m_flHungryTime; // Time based damage inflictor.
    float m_flDistTooFar; // if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy.
    float m_flDistLook; // distance monster sees (Default 2048).
    int m_iTriggerCondition; // for scripted AI, this is the condition that will cause the activation of the monster's TriggerTarget.
    string_t m_iszTriggerTarget; // Name of target that should be fired.
    vec3_t m_HackedGunPos; // HACK until we can query end of gun.
    byte u16[8];
    int m_scriptState; // internal cinematic state.
    EHandle m_hCine; // Cinematic entity.
    EHandle m_hCineBlocker; // Entity that is blocking cinematic execution.
    float m_useTime; // Don't allow +USE until this time.
    byte u17[48];
    string_t m_FormattedName; // The formatted name.<br>For better name outputs. E.g. "Alien Slave" rather than "alien_slave".
    byte u18[20];
    byte m_chTextureType; // Current texture type.<br>See TextureType enum.
    bool m_fCanFearCreatures; // Whether this monster can fear creatures.
    byte u19[26];
    float m_flAutomaticAttackTime; // How long an npc will attempt to fire full auto.
    float m_flFallVelocity; // Current fall speed.
    byte u20[16];
    EHandle m_hGuardEnt; // Monster will guard this entity and turn down follow requests.
    string_t m_iszGuardEntName; // Guard entity name.
    byte u21[84];
    vec3_t m_vecEffectGlowColor; // Glow shell.
    int m_iEffectBlockWeapons; // Monster can't use weapons.
    int m_iEffectInvulnerable; // is invulnerable (god mode)
    int m_iEffectInvisible; // is invisible (render + non-targetable)
    int m_iEffectNonSolid; // is non-solid
    float m_flEffectRespiration; // Extra/less breathing time underwater in seconds
    float m_flEffectGravity; // Gravity modifier (%)
    float m_flEffectFriction; // Movement friction modifier (%)
    float m_flEffectSpeed; // Movement speed modifier (%)
    float m_flEffectDamage; // Damage modifier (%)
    byte u22[12];
    string_t m_iszIdle; // Te idle animation name.
    string_t m_iszPlay; // The play animation name.
    string_t m_iszEntity; // The target entity name.
    byte u23[8];
    float m_flRadius; // The radius to search in.
    float m_flRepeat; // How much time has to pass before the scripted sequence can repeat.
    int m_iDelay; // Delay before execution.
    float m_startTime; // When to start the script.
    byte u24[12];
    bool m_interruptable; // Whether this scripted sequence can be interrupted.
    byte u25[3];
    float m_flMoveToRadius; // When in radius, script is done.
};
