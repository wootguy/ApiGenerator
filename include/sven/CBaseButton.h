// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: func_button
class CBaseButton {
public:
    byte u0[4];
    entvars_t* pev; // Entity variables
    byte u1[48];
    bool m_fOverrideClass; // Whether this entity overrides the classification.
    byte u2[3];
    int m_iClassSelection; // The overridden classification.
    byte u3[20];
    float m_flMaximumFadeWait; // Maximum fade wait time.
    float m_flMaximumFadeWaitB; // Maximum fade wait time B.
    bool m_fCanFadeStart; // Whether fading can start.
    byte u4[11];
    bool m_fCustomModel; // Whether a custom model is used.
    byte u5[3];
    vec3_t m_vecLastOrigin; // Last origin vector
    string_t targetnameOutFilterType; // Target name out filter type.
    string_t classnameOutFilterType; // Class name out filter type.
    string_t targetnameInFilterType; // Target name in filter type.
    string_t classnameInFilterType; // Class name in filter type.
    byte u6[16];
    int m_iOriginalRenderMode; // Original render model.
    int m_iOriginalRenderFX; // Original render FX.
    float m_flOriginalRenderAmount; // Original render amount.
    vec3_t m_vecOriginalRenderColor; // Original render color.
    byte u7[144];
    float m_flDelay; // Delay before fire.
    string_t m_iszKillTarget; // The name of the kill target, if any.
    float m_flFrameRate; // Computed FPS for current sequence.
    float m_flGroundSpeed; // Computed linear movement rate for current sequence.
    float m_flLastEventCheck; // Last time the event list was checked.
    float m_flLastGaitEventCheck; // Last time the event list was checked.
    bool m_fSequenceFinished; // Flag set when StudioAdvanceFrame moves across a frame boundry.
    bool m_fSequenceLoops; // True if the sequence loops.
    byte u8[2];
    int m_toggle_state; // Current toggle state.
    float m_flMoveDistance; // How far a door should slide or rotate.
    float m_flWait; // How long to wait before resetting.
    float m_flLip; // How much to stick out of a wall. Will recede further into walls if negative.
    float m_flTWidth; // For plats.
    float m_flTLength; // For plats.
    byte u9[4];
    vec3_t m_vecPosition1; // Closed position.
    vec3_t m_vecPosition2; // Open position.
    vec3_t m_vecAngle1; // Closed angle.
    vec3_t m_vecAngle2; // Open angle.
    int m_cTriggersLeft; // Trigger_counter only: # of activations remaining.
    float m_flHeight; // Height.
    EHandle m_hActivator; // Handle to the activator.
    byte u10[4];
    vec3_t m_vecFinalDest; // Final destination.
    vec3_t m_vecFinalAngle; // Final angle.
    int m_bitsDamageInflict; // DMG_ damage type that the door or trigger does.
    string_t m_sMaster; // This entity's master, if any.
    byte u11[4];
    bool m_fStayPushed; // button stays pushed in until touched again?
    bool m_fRotating; // a rotating button?  default is a sliding button.
};
