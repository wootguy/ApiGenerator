#pragma once
#pragma pack(push,1)

// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.
// "fx_y" virtual functions have unknown signatures and will likely crash if called.

// Example entity: player
class CBaseEntity {
public:
    entvars_t* pev; // Entity variables
    byte u0_0[48];
    bool m_fOverrideClass; // Whether this entity overrides the classification.
    byte u0_1[3];
    int m_iClassSelection; // The overridden classification.
    byte u0_2[20];
    float m_flMaximumFadeWait; // Maximum fade wait time.
    float m_flMaximumFadeWaitB; // Maximum fade wait time B.
    bool m_fCanFadeStart; // Whether fading can start.
    byte u0_3[11];
    bool m_fCustomModel; // Whether a custom model is used.
    byte u0_4[3];
    vec3_t m_vecLastOrigin; // Last origin vector
    string_t targetnameOutFilterType; // Target name out filter type.
    string_t classnameOutFilterType; // Class name out filter type.
    string_t targetnameInFilterType; // Target name in filter type.
    string_t classnameInFilterType; // Class name in filter type.
    byte u0_5[16];
    int m_iOriginalRenderMode; // Original render model.
    int m_iOriginalRenderFX; // Original render FX.
    float m_flOriginalRenderAmount; // Original render amount.
    vec3_t m_vecOriginalRenderColor; // Original render color.

    virtual void f0_0();
    virtual void f0_1();
    virtual void f0_2();

    // Precaches the entity. Do not call directly.
    virtual void Precache();

    virtual void f0_3();
    virtual void f0_4();
    virtual void f0_5();
    virtual void f0_6();
    virtual void f0_7();

    // Sets up the object collision box.
    virtual int ObjectCaps();

    virtual void f0_8();
    virtual void f0_9();

    // Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.
    virtual int GetClassification(int cl);

    // Returns this entity's classification tag.
    virtual const char* GetClassificationTag();

    // Returns this entity's target name.
    virtual const char* GetClassificationName();

    // Sets this entity's classification override. Can override the entity's player ally setting.
    virtual void SetClassification(int cl);

    virtual void f0_10();

    // Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.
    virtual int IRelationship(CBaseEntity* other, bool ignoreNoTarget);

    // Gets this entity's classification.
    virtual int Classify();

    virtual void f0_11();

    // Traces an attack by the given entity to this entity.
    virtual void TraceAttack(entvars_t* pevAttacker, float flDamage, Vector vecDir, TraceResult* traceResult, int bitsDamageType);

    // Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.
    virtual int TakeDamage(entvars_t* pevInflictor, entvars_t* pevAttacker, float flDamage, int bitsDamageType);

    // Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.
    virtual bool TakeHealth(float flHealth, int bitsDamageType, int health_cap);

    // Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.
    virtual bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap);

    // Tells this entity it's been killed. See the GIB enum for possible values.
    virtual void Killed(entvars_t* pevAtttacker, int iGibbed);

    // Returns the blood color. See the BLOOD_COLOR enum.
    virtual int BloodColor();

    // Traces entity bleed event.
    virtual void TraceBleed(float flDamage, Vector vecDir, TraceResult* traceResult, int bitsDamageType);

    // Returns whether this entity is triggered by the given entity.
    virtual bool IsTriggered(CBaseEntity* pActivator);

    // Returns this entity as its monster entity, if it is a monster.
    virtual CBaseMonster* MyMonsterPointer();

    virtual void f0_12();
    virtual void f0_13();
    virtual void f0_14();

    // Gets the toggle state.
    // See the TOGGLE_STATE enum.
    virtual int GetToggleState();

    // Adds points to this entity.
    virtual void AddPoints(int score, bool bAllowNegativeScore);

    // Adds points to this entity's team.
    virtual void AddPointsToTeam(int score, bool bAllowNegativeScore);

    // Adds the given player item to this entity.
    virtual int AddPlayerItem(CBasePlayerItem* pItem);

    // Removes the given player item to this entity.
    virtual bool RemovePlayerItem(CBasePlayerItem* pItem);

    // Gives ammo to this entity.
    // These parameters are likely wrong. The expected parameter list adds up to 13 bytes but 15 are required.
    virtual int GiveAmmo(int iAmount, const char* szName, int iMax, bool fFromWeapon, short u0=0);

    // Gets this entity's trigger delay.
    virtual float GetDelay();

    // Returns whether this entity is moving.
    virtual bool IsMoving();

    // Resets this entity.
    virtual void OverrideReset();

    // Returns the damage decal
    // See decal_e.
    virtual int DamageDecal(int bitsDamageType);

    // Sets this entity's toggle state.
    virtual void SetToggleState(int state);

    // Starts sneaking.
    virtual void StartSneaking();

    // Stops sneaking.
    virtual void StopSneaking();

    // Reacts to controls set on the pev.
    virtual bool OnControls(entvars_t* pev);

    // Returns whether this entity is sneaking.
    virtual bool IsSneaking();

    // Returns whether this entity is alive.
    virtual bool IsAlive();

    // Returns whether this entity is a BSP model.
    virtual bool IsBSPModel();

    // Returns whether this entity reflects gauss shots.
    virtual bool ReflectGauss();

    // Returns whether this entity has the given target.
    virtual bool HasTarget(const char* szTarget);

    // Returns whether this entity is in the world.
    virtual bool IsInWorld();

    // Returns whether this entity is a monster.
    virtual bool IsMonster();

    // Returns whether this entity is a player.
    virtual bool IsPlayer();

    // Returns whether this is a net client.
    virtual bool IsNetClient();

    // Returns whether this is a point entity.
    virtual bool IsPointEnt();

    // Returns whether this is a breakable brush entity.
    virtual bool IsBreakable();

    // Returns whether this is a machine.
    virtual bool IsMachine();

    // Returns this entity's class name.
    virtual const char* TeamID();

    // Removes this entity in critical situations.
    virtual bool CriticalRemove();

    // Gets the next target to trigger.
    virtual CBaseEntity* GetNextTarget();

    // Makes this entity think. Do not call directly.
    virtual void Think();

    // Triggers this entity's touch function.
    virtual void Touch(CBaseEntity* pOther);

    // Trigger's this entity's use function.
    virtual void Use(CBaseEntity* pActivator, CBaseEntity* pCaller, int useType, float flValue);

    // Triggers this entity's blocked function.
    virtual void Blocked(CBaseEntity* pOther);

    // Updates this entity when removed.
    virtual void UpdateOnRemove();

    // Respawns this entity.
    virtual CBaseEntity* Respawn();

    // Returns whether this entity is dormant.
    virtual void SUB_UseTargets(CBaseEntity* pActivator, int useType, float flValue);

    // Returns this entity's index.
    virtual bool IsLockedByMaster();

    virtual void f0_15();

    // Makes this entity become prone.
    virtual bool FBecomeProne(CBaseEntity* pOther);

    // Returns this entity's center.
    virtual Vector Center();

    // Returns this entity's eye position.
    virtual Vector EyePosition();

    // Returns this entity's ear position.
    virtual Vector EarPosition();

    // Returns this entity's body target for shooting.
    virtual Vector BodyTarget(Vector* posSrc);

    // Returns this entity's illumination.
    virtual int Illumination();

    virtual void f0_16();

    // Returns whether this entity is visible from the given origin.
    virtual bool FVisible(CBaseEntity* pEntity, bool fIgnoreGlass);

    // Returns whether this entity is visible from the given position.
    virtual bool FVisibleFromPos(Vector* vecTarget, Vector* vecStart);

    // Returns whether this entity is facing the given entity, within the given view field.
    virtual bool IsFacing(entvars_t* pevTest, float flDotProduct);

    // Returns the points received for damage done.
    virtual float GetPointsForDamage(float flDamage);

    // Adds damage points to the inflicting entity.
    virtual void GetDamagePoints(entvars_t* pevAttacker, entvars_t* pevInflictor, float flDamage);

    // Sets this entity's player ally status.
    virtual void SetPlayerAlly(bool fState);

    virtual void f0_17();

    // Entity constructor.
    virtual void OnCreate();

    // Entity destructor.
    virtual void OnDestroy();

    virtual void f0_18();

    // Returns whether this entity is revivable at this time.
    virtual bool IsRevivable();

    // Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.
    virtual void BeginRevive(float flTimeUntilRevive);

    // Explicitly casts to sub type.
    virtual void EndRevive(float flTimeUntilRevive);
};
#pragma pack(pop)
